/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Trigger } from "./Trigger";
import { TriggerCountArgs } from "./TriggerCountArgs";
import { TriggerFindManyArgs } from "./TriggerFindManyArgs";
import { TriggerFindUniqueArgs } from "./TriggerFindUniqueArgs";
import { CreateTriggerArgs } from "./CreateTriggerArgs";
import { UpdateTriggerArgs } from "./UpdateTriggerArgs";
import { DeleteTriggerArgs } from "./DeleteTriggerArgs";
import { ChatFlow } from "../../chatFlow/base/ChatFlow";
import { TriggerService } from "../trigger.service";
@graphql.Resolver(() => Trigger)
export class TriggerResolverBase {
  constructor(protected readonly service: TriggerService) {}

  async _triggersMeta(
    @graphql.Args() args: TriggerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Trigger])
  async triggers(
    @graphql.Args() args: TriggerFindManyArgs
  ): Promise<Trigger[]> {
    return this.service.triggers(args);
  }

  @graphql.Query(() => Trigger, { nullable: true })
  async trigger(
    @graphql.Args() args: TriggerFindUniqueArgs
  ): Promise<Trigger | null> {
    const result = await this.service.trigger(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Trigger)
  async createTrigger(
    @graphql.Args() args: CreateTriggerArgs
  ): Promise<Trigger> {
    return await this.service.createTrigger({
      ...args,
      data: {
        ...args.data,

        chatFlow: args.data.chatFlow
          ? {
              connect: args.data.chatFlow,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Trigger)
  async updateTrigger(
    @graphql.Args() args: UpdateTriggerArgs
  ): Promise<Trigger | null> {
    try {
      return await this.service.updateTrigger({
        ...args,
        data: {
          ...args.data,

          chatFlow: args.data.chatFlow
            ? {
                connect: args.data.chatFlow,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Trigger)
  async deleteTrigger(
    @graphql.Args() args: DeleteTriggerArgs
  ): Promise<Trigger | null> {
    try {
      return await this.service.deleteTrigger(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ChatFlow, {
    nullable: true,
    name: "chatFlow",
  })
  async getChatFlow(
    @graphql.Parent() parent: Trigger
  ): Promise<ChatFlow | null> {
    const result = await this.service.getChatFlow(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
