/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TriggerService } from "../trigger.service";
import { TriggerCreateInput } from "./TriggerCreateInput";
import { Trigger } from "./Trigger";
import { TriggerFindManyArgs } from "./TriggerFindManyArgs";
import { TriggerWhereUniqueInput } from "./TriggerWhereUniqueInput";
import { TriggerUpdateInput } from "./TriggerUpdateInput";

export class TriggerControllerBase {
  constructor(protected readonly service: TriggerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Trigger })
  async createTrigger(
    @common.Body() data: TriggerCreateInput
  ): Promise<Trigger> {
    return await this.service.createTrigger({
      data: {
        ...data,

        chatFlow: data.chatFlow
          ? {
              connect: data.chatFlow,
            }
          : undefined,
      },
      select: {
        chatFlow: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        typeField: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Trigger] })
  @ApiNestedQuery(TriggerFindManyArgs)
  async triggers(@common.Req() request: Request): Promise<Trigger[]> {
    const args = plainToClass(TriggerFindManyArgs, request.query);
    return this.service.triggers({
      ...args,
      select: {
        chatFlow: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        typeField: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Trigger })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trigger(
    @common.Param() params: TriggerWhereUniqueInput
  ): Promise<Trigger | null> {
    const result = await this.service.trigger({
      where: params,
      select: {
        chatFlow: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        typeField: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Trigger })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrigger(
    @common.Param() params: TriggerWhereUniqueInput,
    @common.Body() data: TriggerUpdateInput
  ): Promise<Trigger | null> {
    try {
      return await this.service.updateTrigger({
        where: params,
        data: {
          ...data,

          chatFlow: data.chatFlow
            ? {
                connect: data.chatFlow,
              }
            : undefined,
        },
        select: {
          chatFlow: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          typeField: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Trigger })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrigger(
    @common.Param() params: TriggerWhereUniqueInput
  ): Promise<Trigger | null> {
    try {
      return await this.service.deleteTrigger({
        where: params,
        select: {
          chatFlow: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          typeField: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
