/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Trigger as PrismaTrigger,
  ChatFlow as PrismaChatFlow,
} from "@prisma/client";

export class TriggerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TriggerCountArgs, "select">): Promise<number> {
    return this.prisma.trigger.count(args);
  }

  async triggers(args: Prisma.TriggerFindManyArgs): Promise<PrismaTrigger[]> {
    return this.prisma.trigger.findMany(args);
  }
  async trigger(
    args: Prisma.TriggerFindUniqueArgs
  ): Promise<PrismaTrigger | null> {
    return this.prisma.trigger.findUnique(args);
  }
  async createTrigger(args: Prisma.TriggerCreateArgs): Promise<PrismaTrigger> {
    return this.prisma.trigger.create(args);
  }
  async updateTrigger(args: Prisma.TriggerUpdateArgs): Promise<PrismaTrigger> {
    return this.prisma.trigger.update(args);
  }
  async deleteTrigger(args: Prisma.TriggerDeleteArgs): Promise<PrismaTrigger> {
    return this.prisma.trigger.delete(args);
  }

  async getChatFlow(parentId: string): Promise<PrismaChatFlow | null> {
    return this.prisma.trigger
      .findUnique({
        where: { id: parentId },
      })
      .chatFlow();
  }
}
