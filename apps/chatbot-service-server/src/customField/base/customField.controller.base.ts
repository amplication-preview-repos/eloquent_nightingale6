/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomFieldService } from "../customField.service";
import { CustomFieldCreateInput } from "./CustomFieldCreateInput";
import { CustomField } from "./CustomField";
import { CustomFieldFindManyArgs } from "./CustomFieldFindManyArgs";
import { CustomFieldWhereUniqueInput } from "./CustomFieldWhereUniqueInput";
import { CustomFieldUpdateInput } from "./CustomFieldUpdateInput";

export class CustomFieldControllerBase {
  constructor(protected readonly service: CustomFieldService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomField })
  async createCustomField(
    @common.Body() data: CustomFieldCreateInput
  ): Promise<CustomField> {
    return await this.service.createCustomField({
      data: {
        ...data,

        chatFlow: data.chatFlow
          ? {
              connect: data.chatFlow,
            }
          : undefined,
      },
      select: {
        chatFlow: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomField] })
  @ApiNestedQuery(CustomFieldFindManyArgs)
  async customFields(@common.Req() request: Request): Promise<CustomField[]> {
    const args = plainToClass(CustomFieldFindManyArgs, request.query);
    return this.service.customFields({
      ...args,
      select: {
        chatFlow: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customField(
    @common.Param() params: CustomFieldWhereUniqueInput
  ): Promise<CustomField | null> {
    const result = await this.service.customField({
      where: params,
      select: {
        chatFlow: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomField(
    @common.Param() params: CustomFieldWhereUniqueInput,
    @common.Body() data: CustomFieldUpdateInput
  ): Promise<CustomField | null> {
    try {
      return await this.service.updateCustomField({
        where: params,
        data: {
          ...data,

          chatFlow: data.chatFlow
            ? {
                connect: data.chatFlow,
              }
            : undefined,
        },
        select: {
          chatFlow: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomField(
    @common.Param() params: CustomFieldWhereUniqueInput
  ): Promise<CustomField | null> {
    try {
      return await this.service.deleteCustomField({
        where: params,
        select: {
          chatFlow: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
