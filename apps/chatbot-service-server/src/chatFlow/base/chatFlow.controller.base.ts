/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChatFlowService } from "../chatFlow.service";
import { ChatFlowCreateInput } from "./ChatFlowCreateInput";
import { ChatFlow } from "./ChatFlow";
import { ChatFlowFindManyArgs } from "./ChatFlowFindManyArgs";
import { ChatFlowWhereUniqueInput } from "./ChatFlowWhereUniqueInput";
import { ChatFlowUpdateInput } from "./ChatFlowUpdateInput";
import { CustomFieldFindManyArgs } from "../../customField/base/CustomFieldFindManyArgs";
import { CustomField } from "../../customField/base/CustomField";
import { CustomFieldWhereUniqueInput } from "../../customField/base/CustomFieldWhereUniqueInput";
import { TriggerFindManyArgs } from "../../trigger/base/TriggerFindManyArgs";
import { Trigger } from "../../trigger/base/Trigger";
import { TriggerWhereUniqueInput } from "../../trigger/base/TriggerWhereUniqueInput";

export class ChatFlowControllerBase {
  constructor(protected readonly service: ChatFlowService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChatFlow })
  async createChatFlow(
    @common.Body() data: ChatFlowCreateInput
  ): Promise<ChatFlow> {
    return await this.service.createChatFlow({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChatFlow] })
  @ApiNestedQuery(ChatFlowFindManyArgs)
  async chatFlows(@common.Req() request: Request): Promise<ChatFlow[]> {
    const args = plainToClass(ChatFlowFindManyArgs, request.query);
    return this.service.chatFlows({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChatFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async chatFlow(
    @common.Param() params: ChatFlowWhereUniqueInput
  ): Promise<ChatFlow | null> {
    const result = await this.service.chatFlow({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChatFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChatFlow(
    @common.Param() params: ChatFlowWhereUniqueInput,
    @common.Body() data: ChatFlowUpdateInput
  ): Promise<ChatFlow | null> {
    try {
      return await this.service.updateChatFlow({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChatFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChatFlow(
    @common.Param() params: ChatFlowWhereUniqueInput
  ): Promise<ChatFlow | null> {
    try {
      return await this.service.deleteChatFlow({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/customFields")
  @ApiNestedQuery(CustomFieldFindManyArgs)
  async findCustomFields(
    @common.Req() request: Request,
    @common.Param() params: ChatFlowWhereUniqueInput
  ): Promise<CustomField[]> {
    const query = plainToClass(CustomFieldFindManyArgs, request.query);
    const results = await this.service.findCustomFields(params.id, {
      ...query,
      select: {
        chatFlow: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customFields")
  async connectCustomFields(
    @common.Param() params: ChatFlowWhereUniqueInput,
    @common.Body() body: CustomFieldWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customFields: {
        connect: body,
      },
    };
    await this.service.updateChatFlow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customFields")
  async updateCustomFields(
    @common.Param() params: ChatFlowWhereUniqueInput,
    @common.Body() body: CustomFieldWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customFields: {
        set: body,
      },
    };
    await this.service.updateChatFlow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customFields")
  async disconnectCustomFields(
    @common.Param() params: ChatFlowWhereUniqueInput,
    @common.Body() body: CustomFieldWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customFields: {
        disconnect: body,
      },
    };
    await this.service.updateChatFlow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/triggers")
  @ApiNestedQuery(TriggerFindManyArgs)
  async findTriggers(
    @common.Req() request: Request,
    @common.Param() params: ChatFlowWhereUniqueInput
  ): Promise<Trigger[]> {
    const query = plainToClass(TriggerFindManyArgs, request.query);
    const results = await this.service.findTriggers(params.id, {
      ...query,
      select: {
        chatFlow: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        typeField: true,
        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/triggers")
  async connectTriggers(
    @common.Param() params: ChatFlowWhereUniqueInput,
    @common.Body() body: TriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      triggers: {
        connect: body,
      },
    };
    await this.service.updateChatFlow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/triggers")
  async updateTriggers(
    @common.Param() params: ChatFlowWhereUniqueInput,
    @common.Body() body: TriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      triggers: {
        set: body,
      },
    };
    await this.service.updateChatFlow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/triggers")
  async disconnectTriggers(
    @common.Param() params: ChatFlowWhereUniqueInput,
    @common.Body() body: TriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      triggers: {
        disconnect: body,
      },
    };
    await this.service.updateChatFlow({
      where: params,
      data,
      select: { id: true },
    });
  }
}
