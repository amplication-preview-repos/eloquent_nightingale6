/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ChatFlow as PrismaChatFlow,
  CustomField as PrismaCustomField,
  Trigger as PrismaTrigger,
} from "@prisma/client";

export class ChatFlowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ChatFlowCountArgs, "select">): Promise<number> {
    return this.prisma.chatFlow.count(args);
  }

  async chatFlows(
    args: Prisma.ChatFlowFindManyArgs
  ): Promise<PrismaChatFlow[]> {
    return this.prisma.chatFlow.findMany(args);
  }
  async chatFlow(
    args: Prisma.ChatFlowFindUniqueArgs
  ): Promise<PrismaChatFlow | null> {
    return this.prisma.chatFlow.findUnique(args);
  }
  async createChatFlow(
    args: Prisma.ChatFlowCreateArgs
  ): Promise<PrismaChatFlow> {
    return this.prisma.chatFlow.create(args);
  }
  async updateChatFlow(
    args: Prisma.ChatFlowUpdateArgs
  ): Promise<PrismaChatFlow> {
    return this.prisma.chatFlow.update(args);
  }
  async deleteChatFlow(
    args: Prisma.ChatFlowDeleteArgs
  ): Promise<PrismaChatFlow> {
    return this.prisma.chatFlow.delete(args);
  }

  async findCustomFields(
    parentId: string,
    args: Prisma.CustomFieldFindManyArgs
  ): Promise<PrismaCustomField[]> {
    return this.prisma.chatFlow
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customFields(args);
  }

  async findTriggers(
    parentId: string,
    args: Prisma.TriggerFindManyArgs
  ): Promise<PrismaTrigger[]> {
    return this.prisma.chatFlow
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .triggers(args);
  }
}
